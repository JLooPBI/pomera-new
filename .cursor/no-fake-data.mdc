# No Fake Data Rule

## Core Principle
**NEVER insert fake, placeholder, or sample data into any workflow, application, or code unless explicitly instructed to do so.**

## What This Rule Covers

### Prohibited Actions
- **No placeholder data**: Don't use "Lorem ipsum", "Sample User", "Test Data", etc.
- **No fake credentials**: Don't create fake API keys, usernames, passwords, or tokens
- **No mock data**: Don't generate fake user records, product lists, or business data
- **No sample values**: Don't insert example numbers, dates, or text unless specifically requested
- **No dummy content**: Don't populate fields with made-up information

### What To Do Instead
1. **Leave fields empty** - Use `null`, `undefined`, empty strings, or empty arrays
2. **Show clear errors** - Display meaningful error messages when data is missing
3. **Use descriptive placeholders** - Show "No data available" or "Please enter data" instead of fake content
4. **Ask for clarification** - Request the user to provide real data when needed
5. **Document requirements** - Clearly indicate what data is needed and in what format

## Examples

### ❌ WRONG - Don't Do This
```javascript
// Fake user data
const users = [
  { id: 1, name: "John Doe", email: "john@example.com" },
  { id: 2, name: "Jane Smith", email: "jane@example.com" }
];

// Fake API key
const apiKey = "sk-1234567890abcdef";

// Fake product data
const products = [
  { name: "Sample Product", price: 99.99, category: "Electronics" }
];
```

### ✅ CORRECT - Do This Instead
```javascript
// Empty data structure
const users = [];

// Missing API key
const apiKey = process.env.API_KEY || null;

// Empty product list
const products = [];

// Clear messaging
if (users.length === 0) {
  console.log("No users found. Please add user data.");
}
```

## When This Rule Applies
- **Always** - During normal development and coding
- **Always** - When building applications, APIs, or workflows
- **Always** - When creating database schemas or data models
- **Always** - When generating code examples or templates

## Exceptions
**ONLY** when the user explicitly requests:
- "Generate sample data for testing"
- "Create mock data for demonstration"
- "Add placeholder content for this example"
- "Use fake data to show the structure"

## Implementation Guidelines

### For Forms and Input Fields
- Use empty values, not placeholder text
- Show validation messages when data is required
- Use descriptive labels instead of sample content

### For Database Operations
- Use `NULL` or empty values, not fake records
- Implement proper error handling for missing data
- Use constraints to enforce data requirements

### For API Responses
- Return empty arrays/objects when no data exists
- Provide clear error messages for missing data
- Use appropriate HTTP status codes

### For Configuration Files
- Use environment variables or empty values
- Document required fields clearly
- Don't include example values unless specifically requested

## Error Handling Approach
When data is missing or unavailable:
1. **Log the issue** clearly for debugging
2. **Show user-friendly messages** explaining what's needed
3. **Provide guidance** on how to resolve the issue
4. **Fail gracefully** rather than using fake data

## Remember
**It's better to have a broken workflow that clearly shows what's missing than a working workflow with fake data that could mislead users or cause issues in production.**

This rule ensures data integrity, prevents confusion, and maintains professional standards in all development work.
description: Never insert fake, placeholder, or sample data unless explicitly instructed
globs:
alwaysApply: true
---
